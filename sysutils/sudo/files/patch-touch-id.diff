diff --git configure.ac configure.ac
index 00c634e..f58d84c 100644
--- configure.ac
+++ configure.ac
@@ -428,6 +428,17 @@ AC_ARG_WITH(sssd, [AS_HELP_STRING([--with-sssd], [enable SSSD support])],
 		;;
 esac])
 
+dnl
+dnl Handle Touch ID (macOS) support.
+dnl
+AC_ARG_WITH(touch-id, [AS_HELP_STRING([--with-touch-id], [enable Touch ID support])],
+[case $with_touch_id in
+    yes) ;;
+    no) ;;
+    *) AC_MSG_ERROR(["--with-touch-id does not take an argument."])
+       ;;
+esac])
+
 AC_ARG_WITH(sssd-conf, [AS_HELP_STRING([--with-sssd-conf], [path to the SSSD config file])])
 sssd_conf="/etc/sssd/sssd.conf"
 test -n "$with_sssd_conf" && sssd_conf="$with_sssd_conf"
@@ -4105,6 +4116,26 @@ else
     COMMON_OBJS="${COMMON_OBJS} event_select.lo"
 fi
 
+dnl
+dnl Enable special macOS Touch ID support
+dnl
+if test X"$with_touch_id" = X"yes"; then
+    AC_MSG_CHECKING([whether LocalAuthentication framework works])
+    O_LDFLAGS="$LDFLAGS"
+    O_CFLAGS="$CFLAGS"
+    CFLAGS="-x objective-c -framework LocalAuthentication"
+    LDFLAGS="$LDFLAGS -framework Foundation -framework LocalAuthentication"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <LocalAuthentication/LocalAuthentication.h>]])], [
+AC_MSG_RESULT([yes])
+AC_DEFINE(HAVE_TOUCH_ID)
+], [
+AC_MSG_RESULT([no])
+AC_MSG_ERROR([Failed to link with -framework LocalAuthentication])
+])
+    CFLAGS="$O_CFLAGS"
+    AUTH_OBJS="$AUTH_OBJS touch_id.lo"
+fi
+
 dnl
 dnl extra lib and .o file for LDAP support
 dnl
@@ -4914,6 +4945,7 @@ AH_TEMPLATE(HAVE_LDAP, [Define to 1 if you use LDAP for sudoers.])
 AH_TEMPLATE(HAVE_LIBINTL_H, [Define to 1 if you have the <libintl.h> header file.])
 AH_TEMPLATE(HAVE_LINUX_AUDIT, [Define to 1 to enable Linux audit support.])
 AH_TEMPLATE(HAVE_SSSD, [Define to 1 to enable SSSD support.])
+AH_TEMPLATE(HAVE_TOUCH_ID, [Define to 1 to enable Touch ID support.])
 AH_TEMPLATE(HAVE_OPIE, [Define to 1 if you use NRL OPIE.])
 AH_TEMPLATE(HAVE_OPTRESET, [Define to 1 if you have the `optreset' symbol.])
 AH_TEMPLATE(HAVE_PAM, [Define to 1 if you use PAM authentication.])
diff --git plugins/sudoers/Makefile.in plugins/sudoers/Makefile.in
index 5aeeae6..32af993 100644
--- plugins/sudoers/Makefile.in
+++ plugins/sudoers/Makefile.in
@@ -2282,6 +2282,12 @@ sia.i: $(authdir)/sia.c $(authdir)/sudo_auth.h $(devdir)/def_data.h \
 	$(CC) -E -o $@ $(CPPFLAGS) $<
 sia.plog: sia.i
 	rm -f $@; pvs-studio --cfg $(PVS_CFG) --sourcetree-root $(top_srcdir) --skip-cl-exe yes --source-file $(authdir)/sia.c --i-file $< --output-file $@
+touch_id.lo: $(authdir)/touch_id.m $(authdir)/sudo_auth.h $(srcdir)/sudoers.h
+	$(LIBTOOL) $(LTFLAGS) --mode=compile $(CC) -c $(CPPFLAGS) $(CFLAGS) -x objective-c $(ASAN_CFLAGS) $(PIE_CFLAGS) $(SSP_CFLAGS) $(authdir)/touch_id.m
+touch_id.i: $(authdir)/touch_id.m $(authdir)/sudo_auth.h $(srcdir)/sudoers.h
+	$(CC) -E -o $@ $(CPPFLAGS) $<
+touch_id.plog: touch_id.i
+	rm -f $@; pvs-studio --cfg $(PVS_CFG) --sourcetree-root $(top_srcdir) --skip-cl-exe yes --source-file $(authdir)/touch_id.m --i-file $< --output-file $@
 solaris_audit.lo: $(srcdir)/solaris_audit.c $(devdir)/def_data.h \
                   $(incdir)/compat/stdbool.h $(incdir)/sudo_compat.h \
                   $(incdir)/sudo_conf.h $(incdir)/sudo_debug.h \
diff --git plugins/sudoers/auth/sudo_auth.c plugins/sudoers/auth/sudo_auth.c
index 188b65f..f77b010 100644
--- plugins/sudoers/auth/sudo_auth.c
+++ plugins/sudoers/auth/sudo_auth.c
@@ -47,6 +47,10 @@
 
 static sudo_auth auth_switch[] = {
 /* Standalone entries first */
+#ifdef HAVE_TOUCH_ID
+    /* Touch ID, with fallback to PAM when over SSH */
+    AUTH_ENTRY("touchid", FLAG_STANDALONE, sudo_pam_init, touchid_setup, touchid_verify, NULL, sudo_pam_cleanup, touchid_pam_begin_session, touchid_pam_end_session)
+#endif
 #ifdef HAVE_AIXAUTH
     AUTH_ENTRY("aixauth", FLAG_STANDALONE, sudo_aix_init, NULL, sudo_aix_verify, NULL, sudo_aix_cleanup, NULL, NULL)
 #endif
diff --git plugins/sudoers/auth/sudo_auth.h plugins/sudoers/auth/sudo_auth.h
index 9ee408d..41067e8 100644
--- plugins/sudoers/auth/sudo_auth.h
+++ plugins/sudoers/auth/sudo_auth.h
@@ -80,6 +80,10 @@ int sudo_sia_setup(struct passwd *pw, char **prompt, sudo_auth *auth);
 int sudo_sia_verify(struct passwd *pw, char *prompt, sudo_auth *auth, struct sudo_conv_callback *callback);
 int sudo_sia_cleanup(struct passwd *pw, sudo_auth *auth, bool force);
 int sudo_sia_begin_session(struct passwd *pw, char **user_env[], sudo_auth *auth);
+int touchid_setup(struct passwd *pw, char **prompt, sudo_auth *auth);
+int touchid_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback);
+int touchid_pam_begin_session(struct passwd *pw, char **user_envp[], sudo_auth *auth);
+int touchid_pam_end_session(struct passwd *pw, sudo_auth *auth);
 
 /* Prototypes for normal methods */
 int sudo_afs_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback);
diff --git plugins/sudoers/auth/touch_id.m plugins/sudoers/auth/touch_id.m
new file mode 100644
index 0000000..9974b26
--- /dev/null
+++ plugins/sudoers/auth/touch_id.m
@@ -0,0 +1,90 @@
+#include <config.h>
+
+#ifdef HAVE_TOUCH_ID
+
+#include <crt_externs.h>
+#import <LocalAuthentication/LocalAuthentication.h>
+
+#include "sudoers.h"
+#include "sudo_auth.h"
+
+static const LAPolicy kAuthPolicy = 0x3f0;
+static BOOL is_over_ssh = NO;
+
+typedef enum {
+    kTouchIDResultNone,
+    kTouchIDResultAllowed,
+    kTouchIDResultFailed
+} TouchIDResult;
+
+int
+touchid_setup(struct passwd *pw, char **prompt, sudo_auth *auth)
+{
+    // If over SSH, indicated by non-empty environment variable SSH_CONNECTION,
+    // fallback to PAM by exiting early as possible here
+    // Still has to be AUTH_SUCCESS but is_over_ssh is set to non-zero
+    char **ep, **envp = *_NSGetEnviron();
+    const char *name = "SSH_CONNECTION";
+    size_t namelen = 0;
+    while (name[namelen] != '\0') {
+        namelen++;
+    }
+    for (ep = envp; *ep != NULL; ep++) {
+        if (strncmp(*ep, name, namelen) == 0 && (*ep)[namelen] == '=') {
+            log_warningx(SLOG_SEND_MAIL, N_("No Touch ID over SSH."));
+            is_over_ssh = 1;
+            return AUTH_SUCCESS;
+        }
+    }
+    @try {
+        LAContext *context = [[LAContext alloc] init];
+        BOOL canAuthenticate = [context canEvaluatePolicy:kAuthPolicy error:nil];
+        [context release];
+        if (canAuthenticate) {
+            return AUTH_SUCCESS;
+        }
+    }
+    @catch(NSException *) {
+        // LAPolicyDeviceOwnerAuthenticationWithBiometrics may not be available on builds older than 10.12.1!
+        sudo_printf(SUDO_CONV_INFO_MSG, _("2"));
+    }
+    audit_failure(NewArgv, "%s", N_("Touch ID setup failed."));
+    return AUTH_FAILURE;
+}
+
+int
+touchid_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)
+{
+    if (is_over_ssh) {
+        return sudo_pam_verify(pw, pass, auth, callback);
+    }
+    LAContext *context = [[LAContext alloc] init];
+    __block TouchIDResult result = kTouchIDResultNone;
+    [context evaluatePolicy:kAuthPolicy localizedReason:@"authenticate a privileged operation" reply:^(BOOL success, NSError *error) {
+        result = success ? kTouchIDResultAllowed : kTouchIDResultFailed;
+        CFRunLoopWakeUp(CFRunLoopGetCurrent());
+    }];
+    while (result == kTouchIDResultNone)
+        CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0, true);
+    [context release];
+    return result == kTouchIDResultAllowed ? AUTH_SUCCESS : AUTH_FAILURE;
+}
+
+int
+touchid_pam_begin_session(struct passwd *pw, char **user_envp[], sudo_auth *auth)
+{
+    if (is_over_ssh) {
+        return sudo_pam_begin_session(pw, user_envp, auth);
+    }
+    return AUTH_SUCCESS;
+}
+
+int
+touchid_pam_end_session(struct passwd *pw, sudo_auth *auth)
+{
+    if (is_over_ssh) {
+        return sudo_pam_end_session(pw, auth);
+    }
+    return AUTH_SUCCESS;
+}
+#endif // HAVE_TOUCH_ID
diff --git scripts/mkdep.pl scripts/mkdep.pl
index 1d7d53d..fb0b90f 100755
--- scripts/mkdep.pl
+++ scripts/mkdep.pl
@@ -114,7 +114,7 @@ sub mkdep {
     $makefile =~ s:\@SUDO_OBJS\@:openbsd.o preload.o selinux.o sesh.o solaris.o:;
     $makefile =~ s:\@SUDOERS_OBJS\@:bsm_audit.lo linux_audit.lo ldap.lo ldap_util.lo ldap_conf.lo solaris_audit.lo sssd.lo:;
     # XXX - fill in AUTH_OBJS from contents of the auth dir instead
-    $makefile =~ s:\@AUTH_OBJS\@:afs.lo aix_auth.lo bsdauth.lo dce.lo fwtk.lo getspwuid.lo kerb5.lo pam.lo passwd.lo rfc1938.lo secureware.lo securid5.lo sia.lo:;
+    $makefile =~ s:\@AUTH_OBJS\@:afs.lo aix_auth.lo bsdauth.lo dce.lo fwtk.lo getspwuid.lo kerb5.lo pam.lo passwd.lo rfc1938.lo secureware.lo securid5.lo sia.lo touch_id.lo:;
     $makefile =~ s:\@DIGEST\@:digest.lo digest_openssl.lo digest_gcrypt.lo:;
     $makefile =~ s:\@LTLIBOBJS\@:arc4random.lo arc4random_uniform.lo cfmakeraw.lo closefrom.lo dup3.lo explicit_bzero.lo fchmodat.lo freezero.lo fstatat.lo fnmatch.lo getaddrinfo.lo getcwd.lo getentropy.lo getgrouplist.lo getdelim.lo getopt_long.lo getusershell.lo glob.lo inet_ntop_lo inet_pton.lo isblank.lo memrchr.lo mksiglist.lo mksigname.lo mktemp.lo nanosleep.lo openat.lo pipe2.lo pread.lo pwrite.lo pw_dup.lo reallocarray.lo sha2.lo sig2str.lo siglist.lo signame.lo snprintf.lo str2sig.lo strlcat.lo strlcpy.lo strndup.lo strnlen.lo strsignal.lo unlinkat.lo utimens.lo vsyslog.lo:;
 
