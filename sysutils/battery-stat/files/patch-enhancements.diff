diff --git Makefile Makefile
index 8198119..7c17672 100644
--- Makefile
+++ Makefile
@@ -1,9 +1,44 @@
-CFLAGS = -Os
+CC = clang
+CFLAGS = -Os \
+	-Wall \
+	-Wdeprecated-declarations \
+	-Wempty-body \
+	-Werror \
+	-Werror=conversion \
+	-Werror=float-conversion \
+	-Werror=implicit-function-declaration \
+	-Werror=incompatible-pointer-types \
+	-Werror=int-conversion \
+	-Werror=return-type \
+	-Werror=sign-conversion \
+	-Wmissing-braces \
+	-Wmissing-field-initializers \
+	-Wno-missing-prototypes \
+	-Wno-strict-prototypes \
+	-Wno-trigraphs \
+	-Wno-unknown-pragmas \
+	-Wparentheses \
+	-Wpointer-sign \
+	-Wshadow \
+	-Wsign-compare \
+	-Wswitch \
+	-Wuninitialized \
+	-Wunknown-pragmas \
+	-Wunreachable-code \
+	-Wunused-function \
+	-Wunused-label \
+	-Wunused-parameter \
+	-Wunused-value \
+	-Wunused-variable \
+	-Wwrite-strings \
+	-pedantic \
+	-Wno-gnu-empty-struct \
+	-Wno-language-extension-token
 
 .PHONY: clean
 
 battery_stat: battery_stat.o
-	cc -o "$@" $^ -framework CoreFoundation -framework IOKit
+	$(CC) -o "$@" $^ -framework CoreFoundation -framework IOKit
 
 clean:
 	rm battery_stat battery_stat.o
diff --git battery_stat.c battery_stat.c
index 95c238b..ccc53d0 100644
--- battery_stat.c
+++ battery_stat.c
@@ -2,81 +2,132 @@
 #include <IOKit/IOKitLib.h>
 #include <stdint.h>
 
+#define get_int32(x, y)                                                       \
+    (CFNumberGetValue(                                                        \
+        CFDictionaryGetValue(properties, x), kCFNumberSInt32Type, y))
+
 struct battery_info {
-	int32_t current_capacity;
-	int32_t max_capacity;
-	bool external_connected;
-	bool fully_charged;
+    int32_t current_capacity;
+    int32_t max_capacity;
+    bool external_connected;
+    bool fully_charged;
 };
 
-static bool get_battery_info(struct battery_info *battery_info, bool print_debugging) {
-	bool result = false;
-	io_service_t batteryService = IOServiceGetMatchingService(kIOMasterPortDefault, IOServiceMatching("AppleSmartBattery"));
-	if (batteryService) {
-		CFMutableDictionaryRef properties = NULL;
-		if (IORegistryEntryCreateCFProperties(batteryService, &properties, NULL, 0) == 0 && properties != NULL) {
-			if (print_debugging) {
-				CFStringRef description = CFCopyDescription(properties);
-				CFDataRef data = CFStringCreateExternalRepresentation(kCFAllocatorDefault, description, kCFStringEncodingUTF8, 0);
-				CFRelease(description);
-				fprintf(stderr, "%.*s\n", (int)CFDataGetLength(data), CFDataGetBytePtr(data));
-				CFRelease(data);
-			}
-			result = true;
-			result &= CFNumberGetValue(CFDictionaryGetValue(properties, CFSTR("CurrentCapacity")), kCFNumberSInt32Type, &battery_info->current_capacity);
-			result &= CFNumberGetValue(CFDictionaryGetValue(properties, CFSTR("MaxCapacity")), kCFNumberSInt32Type, &battery_info->max_capacity);
-			const void *external_connected = CFDictionaryGetValue(properties, CFSTR("ExternalConnected"));
-			if (external_connected) {
-				battery_info->external_connected = CFBooleanGetValue(external_connected);
-			} else {
-				result = false;
-			}
-			const void *fully_charged = CFDictionaryGetValue(properties, CFSTR("FullyCharged"));
-			if (fully_charged) {
-				battery_info->fully_charged = CFBooleanGetValue(fully_charged);
-			} else {
-				result = false;
-			}
-			CFRelease(properties);
-		}
-		IOObjectRelease(batteryService);
-	}
-	return result;
+static bool get_battery_info(struct battery_info *battery_info,
+                             bool print_debugging) {
+    bool result = false;
+    io_service_t batteryService = IOServiceGetMatchingService(
+        kIOMasterPortDefault, IOServiceMatching("AppleSmartBattery"));
+    if (batteryService) {
+        CFMutableDictionaryRef properties = NULL;
+        if (IORegistryEntryCreateCFProperties(
+                batteryService, &properties, NULL, 0) == 0 &&
+            properties != NULL) {
+            if (print_debugging) {
+                CFStringRef description = CFCopyDescription(properties);
+                CFDataRef data = CFStringCreateExternalRepresentation(
+                    NULL, description, kCFStringEncodingUTF8, 0);
+                CFRelease(description);
+                fprintf(stderr,
+                        "%.*s\n",
+                        (int)CFDataGetLength(data),
+                        CFDataGetBytePtr(data));
+                CFRelease(data);
+            }
+            result =
+                true &
+                get_int32(CFSTR("CurrentCapacity"),
+                          &battery_info->current_capacity) &
+                get_int32(CFSTR("MaxCapacity"), &battery_info->max_capacity);
+            CFBooleanRef external_connected =
+                (CFBooleanRef)CFDictionaryGetValue(properties,
+                                                   CFSTR("ExternalConnected"));
+            if (external_connected) {
+                battery_info->external_connected =
+                    CFBooleanGetValue(external_connected);
+            } else {
+                result = false;
+            }
+            CFBooleanRef fully_charged = (CFBooleanRef)CFDictionaryGetValue(
+                properties, CFSTR("FullyCharged"));
+            if (fully_charged) {
+                battery_info->fully_charged = CFBooleanGetValue(fully_charged);
+            } else {
+                result = false;
+            }
+            CFRelease(properties);
+        }
+        IOObjectRelease(batteryService);
+    }
+    return result;
 }
 
-
 int main(int argc, const char *argv[]) {
-	struct battery_info result;
-	if (get_battery_info(&result, false)) {
-		if (argc == 2 && strcmp(argv[1], "prompt") == 0) {
-			const char *prefix;
-			const char *suffix;
-			if (result.fully_charged) {
-				prefix = "";
-				suffix = "";
-			} else {
-				int32_t percent = (result.current_capacity * 100) / result.max_capacity;
-				if (percent >= 70) {
-					prefix = "\x1b[32m";
-				} else if (percent >= 30) {
-					prefix = "\x1b[1;33m";
-				} else {
-					prefix = "\x1b[31m";
-				}
-				suffix = "\x1b[00m";
-			}
-			printf(result.external_connected ? "%s$%s" : "%s!%s", prefix, suffix);
-		} else if (argc == 1 || (argc == 2 && strcmp(argv[1], "simple") == 0)) {
-			printf("current_capacity=%d max_capacity=%d external_connected=%d fully_charged=%d\n", result.current_capacity, result.max_capacity, result.external_connected, result.fully_charged);
-		} else if (argc == 2 && strcmp(argv[1], "json") == 0) {
-			printf("{\"current_capacity\":%d,\"max_capacity\":%d,\"external_connected\":%s,\"fully_charged\":%s}\n", result.current_capacity, result.max_capacity, result.external_connected ? "true" : "false", result.fully_charged ? "true" : "false");
-		} else {
-			fprintf(stderr, "usage:\n\tbattery_stat\n\tbattery_stat simple\n\tbattery_stat json\n\tbattery_stat prompt\n");
-			return 1;
-		}
-		return 0;
-	} else {
-		fprintf(stderr, "failed to retrieve battery info\n");
-		return 1;
-	}
-}
\ No newline at end of file
+    struct battery_info result;
+    if (get_battery_info(&result, false)) {
+        if (argc == 2 && strcmp(argv[1], "prompt") == 0) {
+            const char *prefix;
+            const char *suffix;
+            if (result.fully_charged) {
+                prefix = suffix = "";
+            } else {
+                int32_t percent =
+                    (result.current_capacity * 100) / result.max_capacity;
+                if (percent >= 70) {
+                    prefix = "\x1b[32m";
+                } else if (percent >= 30) {
+                    prefix = "\x1b[1;33m";
+                } else {
+                    prefix = "\x1b[31m";
+                }
+                suffix = "\x1b[00m";
+            }
+            printf(
+                result.external_connected ? "%s$%s" : "%s!%s", prefix, suffix);
+        } else if (argc >= 2 && strcmp(argv[1], "percentage") == 0) {
+            if (result.fully_charged) {
+                return 0;
+            }
+            int32_t percent =
+                (result.current_capacity * 100) / result.max_capacity;
+            const char *suffix;
+            if (argc == 3 && strcmp(argv[2], "emoji") == 0) {
+                if (result.fully_charged) {
+                    suffix = "";
+                } else {
+                    suffix = result.external_connected ? "ðŸ”Œ" : "ðŸ”‹";
+                }
+            } else {
+                suffix = "";
+            }
+            printf("%d%%%s", percent, suffix);
+        } else if (argc == 1 ||
+                   (argc == 2 && strcmp(argv[1], "simple") == 0)) {
+            printf("current_capacity=%d max_capacity=%d "
+                   "external_connected=%d "
+                   "fully_charged=%d\n",
+                   result.current_capacity,
+                   result.max_capacity,
+                   result.external_connected,
+                   result.fully_charged);
+        } else if (argc == 2 && strcmp(argv[1], "json") == 0) {
+            printf("{\"current_capacity\":%d,\"max_capacity\":%d,"
+                   "\"external_"
+                   "connected\":%s,\"fully_charged\":%s}\n",
+                   result.current_capacity,
+                   result.max_capacity,
+                   result.external_connected ? "true" : "false",
+                   result.fully_charged ? "true" : "false");
+        } else {
+            fprintf(stderr,
+                    "usage:\n\tbattery_stat\n\tbattery_stat "
+                    "simple\n\tbattery_stat json\n\tbattery_stat "
+                    "prompt\n\tbattery_stat percentage [emoji]\n");
+            return 1;
+        }
+        return 0;
+    } else {
+        fprintf(stderr, "failed to retrieve battery info\n");
+        return 1;
+    }
+}
