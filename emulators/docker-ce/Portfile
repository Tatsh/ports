# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           golang 1.0

set commit          23482c2bf6
go.setup            github.com/docker/docker-ce ${commit}
version             19.03.13
categories          emulators
maintainers         {gmail.com:audvare @Tatsh}
license             Apache-2
homepage            https://www.docker.com/

description         The core functions you need to create Docker images and run Docker containers.
long_description    ${description}

checksums           rmd160  eafaf514b44a678c689cdd597536a33275c51af4 \
                    sha256  a18c079665371a7f74a36a970de40c0a6fd671969ade31717cb41ce882e668d2 \
                    size    18498785

depends_build-append    port:go-md2man port:pkgconfig
depends_lib-append      port:sqlite3
depends_run-append      port:git port:xz port:containerd port:docker-proxy
# libltdl ?

patch {
    # fake golang layout
    file link -symbolic ${worksrcpath}/../docker ${worksrcpath}/components/engine
    file link -symbolic ${worksrcpath}/../cli ${worksrcpath}/components/cli
    reinplace "s/EXTLDFLAGS_STATIC='/&-fno-PIC /" ${worksrcpath}/components/engine/hack/make.sh
    reinplace "s/LDFLAGS_STATIC_DOCKER='/&-extldflags -fno-PIC /" ${worksrcpath}/components/engine/hack/make/dynbinary-daemon
    foreach line_no {98 99 100 101 102 103 104} {
        reinplace "96d" ${worksrcpath}/components/engine/hack/make.sh
    }
    reinplace "s:dockerd\\?.exe::g" ${worksrcpath}/components/cli/contrib/completion/bash/docker
}

set real_version    19.03.13
set buildtime       "2020-10-10T05:00:18.416272000+00:00"

build {
    # build daemon
    system "cd ${worksrcpath}/components/engine && env CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 GOPATH=${gopath} CGO_LDFLAGS=-L${prefix}/lib CGO_CFLAGS=-I${prefix}/include DOCKER_GITCOMMIT=${commit} BUILDTIME=${buildtime} DOCKER_BUILDTAGS=exclude_graphdriver_devmapper ./hack/make.sh dynbinary"
    # build CLI
    system "cd ${worksrcpath}/components/cli && env GOPATH=${gopath} CGO_CFLAGS=-I${prefix}/include CGO_LDFLAGS=-L${prefix}/lib DISABLE_WARN_OUTSIDE_CONTAINER=1 make \"LDFLAGS=-extldflags -fno-PIC\" VERSION=${real_version} GITCOMMIT=${commit} BUILDTIME=${buildtime} dynbinary"
    # build man pages
    system "cd ${worksrcpath}/components/cli && go build -o gen-manpages github.com/docker/cli/man"
    system "cd ${worksrcpath}/components/cli && ./gen-manpages --root . --target ./man/man1"
    system "cd ${worksrcpath}/components/cli && ./man/md2man-all.sh -q"
    system "cd ${worksrcpath}/components/cli && rm gen-manpages"
}

destroot {
    foreach app {containerd containerd-shim runc} {
        ln -s ${prefix}/bin/${app} ${prefix}/bin/${app}
    }
    xinstall -m 0755 ${worksrcpath}/components/engine/bundles/dynbinary-daemon/dockerd-${version} ${destroot}${prefix}/bin/dockerd
    copy ${worksrcpath}/components/engine/contrib ${destroot}${prefix}/share/${name}/contrib
    foreach path {*}[glob -nocomplain ${worksrcpath}/components/cli/bin/docker-*] {
        xinstall -m 0755 ${path} ${destroot}${prefix}/bin/docker
    }
    copy ${worksrcpath}/components/cli/man ${destroot}${prefix}/share/man
    # Completion, conditional
    # xinstall -m 0644 {*}[glob -nocomplain ${worksrcpath}/components/cli/contrib/completion/bash/*]
}
