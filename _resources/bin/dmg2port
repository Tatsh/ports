#!/usr/bin/env python
from os.path import join as path_join, realpath
from typing import Any, Dict, List
import argparse
import os
import plistlib
import subprocess as sp
import sys
import tempfile


def has_libstdcxx(start: str):
    dirpath: str
    dirnames: List[str]
    filenames: List[str]
    for dirpath, dirnames, filenames in os.walk(start):
        for fn in filenames:
            fpath = '{}/{}'.format(dirpath, fn)
            if os.stat(fpath).st_mode & 1:
                proc = sp.run(['otool', '-L', fpath],
                              capture_output=True,
                              text=True)
                if 'libstdc++' in proc.stdout:
                    return True
    return False


def hdiutil_info() -> Dict[str, Any]:
    return plistlib.loads(sp.check_output(['hdiutil', 'info', '-plist']))


def mount_dmg(mountroot: str, dmg: str):
    sp.check_call([
        'hdiutil', 'attach', '-noverify', '-noautofsck', '-noautoopen',
        '-private', '-nobrowse', '-readonly', '-mount', 'required',
        '-mountroot', mountroot, '-quiet', dmg
    ])


def unmount_dmg(mountpoint: str):
    sp.check_call(['hdiutil', 'detach', '-quiet', mountpoint])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('dmg', metavar='DMG', nargs=1)
    parser.add_argument('app_name', metavar='APP_NAME', nargs=1)
    args = parser.parse_args()

    dmg: str = realpath(args.dmg[0])
    app_name: str = args.app_name[0]
    if not app_name.endswith('.app'):
        app_name += '.app'

    info = hdiutil_info()
    if 'images' in info:
        for x in info['images']:
            p: str = realpath(x['image-path'])
            if p != dmg:
                continue
            for s in x['system-entities']:
                try:
                    unmount_dmg(s['mount-point'])
                except (KeyError, sp.CalledProcessError):
                    pass

    mountroot: str = tempfile.mkdtemp()
    mount_dmg(mountroot, dmg)

    ld: List[str] = os.listdir(mountroot)
    if len(ld) != 1:
        print('Mount root has more than one item?!', file=sys.stderr)
        return 1
    if not len(ld):
        print('Nothing mounted?!', file=sys.stderr)
        return 1
    root_prefix: str = os.listdir(mountroot)[0]
    realroot: str = path_join(mountroot, root_prefix)
    start: str = path_join(realroot, app_name)

    if has_libstdcxx(start):
        print('libstdc++ detected', file=sys.stderr)
        unmount_dmg(realroot)
        return 1

    print('''destroot {{
    file copy "${{worksrcpath}}/{}"
        "${{destroot}}/${{applications_dir}}/"
}}'''.format(app_name))

    unmount_dmg(realroot)


if __name__ == '__main__':
    sys.exit(main())
