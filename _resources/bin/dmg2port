#!/usr/bin/env python
from os.path import join as path_join, realpath
from typing import Any, Dict, List
import argparse
import os
import plistlib
import re
import subprocess as sp
import sys
import tempfile


def has_libstdcxx(start: str):
    dirpath: str
    dirnames: List[str]
    filenames: List[str]
    for dirpath, dirnames, filenames in os.walk(start):
        for fn in filenames:
            fpath = path_join(dirpath, fn)
            try:
                is_exec = os.stat(fpath).st_mode & 1
            except FileNotFoundError:
                continue
            if is_exec:
                proc = sp.run(['otool', '-L', fpath],
                              capture_output=True,
                              text=True)
                if 'libstdc++' in proc.stdout:
                    return True
    return False


def hdiutil_info() -> Dict[str, Any]:
    return plistlib.loads(sp.check_output(['hdiutil', 'info', '-plist']))


def mount_dmg(mountroot: str, dmg: str):
    sp.check_call([
        'hdiutil', 'attach', '-noverify', '-noautofsck', '-noautoopen',
        '-private', '-nobrowse', '-readonly', '-mount', 'required',
        '-mountroot', mountroot, '-quiet', dmg
    ])


def unmount_dmg(mountpoint: str):
    sp.check_call(['hdiutil', 'detach', '-quiet', mountpoint])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('dmg', metavar='DMG', nargs=1)
    parser.add_argument('app_name', metavar='APP_NAME', nargs=1)
    args = parser.parse_args()

    if args.dmg[0].startswith('http:') or args.dmg[0].startswith('https:'):
        _, dmg = tempfile.mkstemp(suffix='.dmg')
        sp.check_call(['curl', '-q', '-o', dmg, args.dmg[0]])
    else:
        dmg: str = realpath(args.dmg[0])

    app_name: str = args.app_name[0]
    pkg_name = app_name.lower().replace(' ', '-').replace('.app', '')
    if not app_name.endswith('.app'):
        app_name += '.app'

    info = hdiutil_info()
    if 'images' in info:
        for x in info['images']:
            p: str = realpath(x['image-path'])
            if p != dmg:
                continue
            for s in x['system-entities']:
                try:
                    unmount_dmg(s['mount-point'])
                except (KeyError, sp.CalledProcessError):
                    pass

    mountroot: str = tempfile.mkdtemp()
    mount_dmg(mountroot, dmg)

    ld: List[str] = os.listdir(mountroot)
    if len(ld) != 1:
        print('Mount root has more than one item?!', file=sys.stderr)
        return 1
    if not len(ld):
        print('Nothing mounted?!', file=sys.stderr)
        return 1
    root_prefix: str = os.listdir(mountroot)[0]
    realroot: str = path_join(mountroot, root_prefix)
    start: str = path_join(realroot, app_name)

    stdcxx_line = ''
    if has_libstdcxx(start):
        stdcxx_line = '\nconfigure.cxx_stdlib libstdc++\n'

    plist_path = path_join(start, 'Contents', 'Info.plist')
    try:
        with open(plist_path, 'rb') as f:
            pl = plistlib.load(f)
    except IOError:
        print('Info.plist not found', file=sys.stderr)
        unmount_dmg(realroot)
        return 1

    try:
        version = re.sub(r'^v', '', pl['CFBundleShortVersionString'])
    except KeyError:
        version = 'VERSION'

    print('''PortSystem 1.0

name                {display_name}
version             {version}
categories          aqua
platforms           macosx
maintainers         {{gmail.com:audvare @Tatsh}}
description         DESCRIPTION
long_description    ${{description}}
homepage            HOMEPAGE
distfiles           DISTFILES
master_sites        URL

# CHECKSUMS

livecheck.type      regex
livecheck.url       ${{homepage}}
livecheck.regex     REGEX

use_configure       no
use_dmg             yes
extract.only        DMGFILE
extract.mkdir       no
{stdcxx_line}
build {{}}

destroot {{
    file copy "${{worksrcpath}}/{name}" "${{destroot}}/${{applications_dir}}/"
}}'''.format(name=app_name,
             display_name=pkg_name,
             version=version,
             stdcxx_line=stdcxx_line))

    unmount_dmg(realroot)


if __name__ == '__main__':
    sys.exit(main())
