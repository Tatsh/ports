#!/usr/bin/env python
from os.path import dirname, expanduser
from typing import Any, cast
import re
import subprocess as sp
import sys
import xml.etree.ElementTree as etree

import requests

INSTALLED_PORTS = ('/opt/local/var/macports/sources/rsync.macports.org/'
                   'macports/release/tarballs/ports')
LOCAL_MACPORTS_PORTS = expanduser('~/dev/macports/macports-ports')
RSS_NS = {'': 'http://www.w3.org/2005/Atom'}
SUDO_PORT = ('sudo', 'port')
VERSION_LINE_RE = r'\(port version:\s+([^,]+),\s+new version:\s+([^\)]+)\)'


def port_cmd(*args: Any, **kwargs: Any) -> sp.CompletedProcess:
    return sp.run((SUDO_PORT + args),
                  **kwargs,
                  check=True,
                  stdout=sp.PIPE,
                  text=True)


def main() -> int:
    for line in sys.stdin.readlines():
        if m := re.search(VERSION_LINE_RE, line):
            port = line.split(' ')[0]
            print(f'Port: {port}', file=sys.stderr)
            old, new = m.groups()
            portfile = cast(str, port_cmd('file', port).stdout.strip())
            is_system_port = False
            if portfile.startswith(INSTALLED_PORTS):
                portfile = portfile.replace(INSTALLED_PORTS,
                                            LOCAL_MACPORTS_PORTS)
                is_system_port = True
            content = cast(str, port_cmd('cat', port).stdout.replace(old, new))
            if ((len(old) == 7 or len(old) > 8)
                    and re.match(r'^[0-9a-f]+$', old)):
                version = cast(
                    str,
                    port_cmd('-q', 'info', '--version', port).stdout.strip())
                assert len(version) == 8, \
                    f'Unsure how to handle this version string: {version}'
                homepage = cast(
                    str,
                    port_cmd('-q', 'info', '--homepage', port).stdout)
                if 'github.com' in homepage:
                    r = requests.get(f'{homepage.strip()}/commits/master.atom')
                    r.raise_for_status()
                    updated_el = etree.fromstring(r.text).find(
                        'entry/updated', RSS_NS)
                    assert updated_el is not None
                    assert updated_el.text is not None
                    content = content.replace(version, updated_el.text)
                else:
                    raise ValueError(f'Unhandled URL: {homepage}')
            with open(portfile, 'w') as g:
                g.write(content)
            cwd = dirname(portfile)
            for action in ('clean', 'bump', 'destroot'):
                port_cmd('-v', action, cwd=cwd)
            if not is_system_port:
                sp.run(('git', 'commit', '--no-gpg-sign', '--no-verify', '-m',
                        f'{port}: update to {new}', cwd),
                       check=True)
    return 0


if __name__ == '__main__':
    sys.exit(main())
